# -*- coding: utf-8 -*-
"""Fitness tracking .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZRZTUtEQl_7rJr85s4VM83-yUjL05RiW
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

# Read the CSV file into a DataFrame
df = pd.read_csv('/content/drive/MyDrive/wk10_pandas_learner/Resources/data.csv')

# Print the first 5 rows of the DataFrame
print(df.head(10))

print(df.tail(10))

print(df.info())

des=df.describe() # get descriptive statistics
des

#random sample of 10 rows.
df.sample(10)

print(df.iloc[30:41]) #41 exclusive as last one is not counted

df['Calories'] # to inspect just one column

# Access column values by name
durations = df["Duration"]
calories = df["Calories"]
durations
calories

# Acces by index
first_row = df.iloc[0]  # Gets the first row
last_row = df.iloc[-1]  # Gets the last row
print ("First Row is")
first_row
print ("Last Row is")
last_row

# Assuming you have set an index, e.g., df.set_index("Date")
#row_with_index_2023_11_20 = df.loc["2023-11-20"]

high_calories = df[df["Calories"] > 400]  # Select rows with calories exceeding 400
high_calories

#dataframe to string
df_string = df.to_string()
print(df_string)

#Find the row with the longest exercise duration
max_duration_row = df[df['Duration'] == df['Duration'].max()]
max_duration_row

#Calculate the average calorie burn per exercise duration.
average_calories_per_duration = df.groupby('Duration')['Calories'].mean()
average_calories_per_duration

# Group the data by exercise duration and find the average pulse for each group.
average_pulse_per_duration = df.groupby('Duration')['Pulse'].mean()
average_pulse_per_duration

df

# Create a histogram for calorie vs duration using Matplotlib
import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
plt.hist(df['Calories'], bins=5, edgecolor='black', alpha=0.7)

# Add labels and title
plt.title('Histogram of Calories Burned vs Duration')
plt.xlabel('Calories Burned')
plt.ylabel('Frequency')

# Display the plot
plt.show()

# Create a scatter plot for calories vs duration using Matplotlib
plt.figure(figsize=(10, 6))
plt.scatter(df['Duration'], df['Calories'], color='orange', alpha=0.7)

# Add labels and title
plt.title('Scatter Plot of Calories Burned vs Duration')
plt.xlabel('Duration (minutes)')
plt.ylabel('Calories Burned')

# Display the plot
plt.show()

# prompt: side by side histogram

import matplotlib.pyplot as plt
# Create subplots for side-by-side histograms
fig, axes = plt.subplots(1, 2, figsize=(12, 5))

# Histogram for Calories
axes[0].hist(df['Calories'], bins=10, edgecolor='black')
axes[0].set_title('Calories Burned')
axes[0].set_xlabel('Calories')
axes[0].set_ylabel('Frequency')

# Histogram for Duration
axes[1].hist(df['Duration'], bins=10, edgecolor='black')
axes[1].set_title('Exercise Duration')
axes[1].set_xlabel('Duration (minutes)')
axes[1].set_ylabel('Frequency')

# Adjust layout and display the plot
plt.tight_layout()
plt.show()

#line plot for all variables
import matplotlib.pyplot as plt
import seaborn as sns
df.plot()
plt.show()

# Create a figure with 2 subplots (1 row, 2 columns)
fig, axes = plt.subplots(1, 2, figsize=(14, 6))

# Line chart for Calories vs. Duration
axes[0].plot(df['Duration'], df['Calories'], marker='o', linestyle='-', color='b')
axes[0].set_title('Calories vs Duration')
axes[0].set_xlabel('Duration (minutes)')
axes[0].set_ylabel('Calories Burned')

# Line chart for Pulse vs. Duration
axes[1].plot(df['Duration'], df['Pulse'], marker='o', linestyle='-', color='g')
axes[1].set_title('Pulse vs Duration')
axes[1].set_xlabel('Duration (minutes)')
axes[1].set_ylabel('Pulse (bpm)')

# Adjust layout to prevent overlap
plt.tight_layout()

# Display the plots
plt.show()

# Create a figure with 3 subplots (1 row, 3 columns)
fig, axes = plt.subplots(1, 3, figsize=(18, 6))

# Box plot for Calories
sns.boxplot(data=df['Calories'], ax=axes[0])
axes[0].set_title('Calories')
axes[0].set_ylabel('Calories Burned')

# Box plot for Pulse
sns.boxplot(data=df['Pulse'], ax=axes[1])
axes[1].set_title('Pulse')
axes[1].set_ylabel('Pulse (bpm)')

# Box plot for Maxpulse
sns.boxplot(data= df['Maxpulse'], ax=axes[2])
axes[2].set_title('Maxpulse')
axes[2].set_ylabel('Max Pulse (bpm)')

# Adjust layout to prevent overlap
plt.tight_layout()

# Display the plots
plt.show()

# Create a pairplot
sns.pairplot(df)

# Display the plot
plt.show()

# Calculate the correlation matrix
correlation_matrix = df.corr()

# Create a heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)

# Add a title
plt.title('Correlation Heatmap')

# Display the plot
plt.show()

# Create a vertical bar plot
plt.figure(figsize=(10, 6))
sns.barplot(x='Duration', y='Calories', data=df, palette='viridis')

# Add labels and title
plt.title('Calories Burned by Duration')
plt.xlabel('Duration (minutes)')
plt.ylabel('Calories Burned')

# Display the plot
plt.show()

import matplotlib.pyplot as plt
# Create a regression plot using Seaborn
plt.figure(figsize=(10, 6))
sns.regplot(x='Duration', y='Calories', data=df, scatter_kws={'alpha':0.6})

# Add labels and title
plt.title('Regression Plot of Calories Burned vs Duration')
plt.xlabel('Duration (minutes)')
plt.ylabel('Calories Burned')

# Display the plot
plt.show()

import matplotlib.pyplot as plt
import ipywidgets as widgets
from IPython.display import display, clear_output

# Dropdown for selecting plot type
plot_type_dropdown = widgets.Dropdown(
    options=['Histogram of Calories', 'Scatter Plot of Calories vs Duration',
             'Histogram of Pulse', 'Box Plots', 'Pair Plot',
             'Correlation Heatmap','Bar Plot', 'Regression Plot'],
    value='Histogram of Calories',
    description='Plot Type:',
)

# Button to generate plot
generate_button = widgets.Button(
    description='Generate Plot',
    button_style='info',
)

# Output widget to display the plot
output = widgets.Output()

def generate_plot(button):
    with output:
        clear_output(wait=True)
        selected_plot = plot_type_dropdown.value

        if selected_plot == 'Histogram of Calories':
            plt.figure(figsize=(10, 6))
            sns.histplot(df['Calories'], bins=5, kde=False)
            plt.title('Histogram of Calories Burned')
            plt.xlabel('Calories Burned')
            plt.ylabel('Frequency')
            plt.show()

        elif selected_plot == 'Scatter Plot of Calories vs Duration':
            plt.figure(figsize=(10, 6))
            sns.scatterplot(x=df['Duration'], y=df['Calories'])
            plt.title('Scatter Plot of Calories Burned vs Duration')
            plt.xlabel('Duration (minutes)')
            plt.ylabel('Calories Burned')
            plt.show()
        elif selected_plot == 'Histogram of Pulse':
            plt.figure(figsize=(10, 6))
            # Use sns.histplot for histograms, not sns.scatterplot
            sns.histplot(x=df['Pulse'], bins=5, kde=False)
            plt.title('Histogram of Pulse') # Update title to reflect the plot
            plt.xlabel('Pulse') # Update x-axis label
            plt.ylabel('Frequency')
            plt.show()
        elif selected_plot == 'Box Plots':
            fig, axes = plt.subplots(1, 3, figsize=(18, 6))
            # Box plot for Calories
            sns.boxplot(data=df['Calories'], ax=axes[0])
            axes[0].set_title('Calories')
            axes[0].set_ylabel('Calories Burned')
            # Box plot for Pulse
            sns.boxplot(data=df['Pulse'], ax=axes[1])
            axes[1].set_title('Pulse')
            axes[1].set_ylabel('Pulse (bpm)')
            # Box plot for Maxpulse
            sns.boxplot(data= df['Maxpulse'], ax=axes[2])
            axes[2].set_title('Maxpulse')
            axes[2].set_ylabel('Max Pulse (bpm)')
            # Adjust layout to prevent overlap
            plt.tight_layout()
            # Display the plots
            plt.show()
        elif selected_plot == 'Pair Plot':
            sns.pairplot(df)
            plt.show()
        elif selected_plot == 'Correlation Heatmap':
            # Calculate the correlation matrix
            correlation_matrix = df.corr()
            # Create a heatmap
            plt.figure(figsize=(10, 6))
            sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
            # Add a title
            plt.title('Correlation Heatmap')

            # Display the plot
            plt.show()
        elif selected_plot == 'Bar Plot':
            plt.figure(figsize=(10, 6))
            sns.barplot(x='Duration', y='Calories', data=df, palette='viridis')
            plt.title('Calories Burned by Duration')
            plt.xlabel('Duration (minutes)')
            plt.ylabel('Calories Burned')
            plt.show()
        else:
          # Create a regression plot using Seaborn
            plt.figure(figsize=(10, 6))
            sns.regplot(x='Duration', y='Calories', data=df, scatter_kws={'alpha':0.6})

            # Add labels and title
            plt.title('Regression Plot of Calories Burned vs Duration')
            plt.xlabel('Duration (minutes)')
            plt.ylabel('Calories Burned')

            # Display the plot
            plt.show()

generate_button.on_click(generate_plot)

# Display the dashboard elements
display(plot_type_dropdown, generate_button, output)

